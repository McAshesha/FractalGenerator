module Fractals.Generator
  ( FractalChoice(..)
  , generate
  , generateText
  ) where

import Types (TerminalSize(..))
import AsciiRenderer (Color(..))
import qualified Fractals.Generator.Mandelbrot as Mandelbrot
import qualified Fractals.Generator.Julia as Julia
import qualified Fractals.Generator.Sierpinski as Sierpinski
import Control.Parallel.Strategies (using, parList, rdeepseq)
import Data.Char (toUpper)
import Data.List (transpose)

data FractalChoice
  = MandelbrotSet
  | JuliaSet
  | SierpinskiTriangle
  deriving (Show, Eq, Enum, Bounded)

generate :: FractalChoice -> TerminalSize -> [[Color]]
generate choice size = case choice of
  MandelbrotSet -> Mandelbrot.generate size
  JuliaSet -> Julia.generate size
  SierpinskiTriangle -> Sierpinski.generate size

cellAspect :: Double
cellAspect = 11.0

generateText :: String -> Double -> TerminalSize -> [[Color]]
generateText text ratio (TerminalSize (termRows, termCols)) =
  [ [ colorAt col row | col <- [0..termCols - 1] ]
  | row <- [0..(vertOffset + targetHeight)] ]
  `using` parList rdeepseq
  where
    -- Calculate dimensions with aspect correction
    targetWidth = max 1 (floor (fromIntegral termCols * ratio))

    -- Calculate proportional height based on terminal aspect ratio
    targetHeight = floor $ fromIntegral targetWidth / cellAspect

    -- Vertical centering offsets
    vertOffset = 0 -- max 0 ((termRows - targetHeight) `div` 2)

    -- Generate combined bitmap
    charBitmaps = map (scaleChar targetHeight . charToSDF) text
    fullBitmap = combineHorizontally charBitmaps
    bmpWidth = if null fullBitmap then 0 else length (head fullBitmap)
    bmpHeight = length fullBitmap

    colorAt col row
      | row < vertOffset || row >= vertOffset + targetHeight = Color 0 1
      | otherwise =
          let x = floor (fromIntegral col * fromIntegral bmpWidth / fromIntegral targetWidth)
              y = floor (fromIntegral (row - vertOffset) * fromIntegral bmpHeight / fromIntegral targetHeight)
          in if y < bmpHeight && x < bmpWidth
                then Color (quantize (fullBitmap !! y !! x)) 1
                else Color 0 1

    quantize val = min 7 (max 0 (floor (val * 8)))

-- Combine characters horizontally with spacing
combineHorizontally :: [[[Double]]] -> [[Double]]
combineHorizontally bitmaps =
  map concat (transpose paddedBitmaps)
  where
    paddedBitmaps = map (map (++ replicate 2 0.0)) bitmaps  -- Add 2px spacing

charToSDF :: Char -> [[Double]]
charToSDF c = case toUpper c of
  'A' -> [[0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0],
          [0.0, 1.0, 1.0, 1.0, 1.0, 0.0, 0.0, 0.0],
          [1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0],
          [1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0],
          [1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 0.0, 0.0],
          [1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0],
          [1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0],
          [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]]
  'B' -> [[1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 0.0, 0.0],
          [0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0],
          [0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0],
          [0.0, 1.0, 1.0, 1.0, 1.0, 1.0, 0.0, 0.0],
          [0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0],
          [0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0],
          [1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 0.0, 0.0],
          [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]]
  'C' -> [[0.0, 0.0, 1.0, 1.0, 1.0, 1.0, 0.0, 0.0],
          [0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0],
          [1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0],
          [1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0],
          [1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0],
          [0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0],
          [0.0, 0.0, 1.0, 1.0, 1.0, 1.0, 0.0, 0.0],
          [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]]
  'D' -> [[1.0, 1.0, 1.0, 1.0, 1.0, 0.0, 0.0, 0.0],
          [0.0, 1.0, 1.0, 0.0, 1.0, 1.0, 0.0, 0.0],
          [0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0],
          [0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0],
          [0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0],
          [0.0, 1.0, 1.0, 0.0, 1.0, 1.0, 0.0, 0.0],
          [1.0, 1.0, 1.0, 1.0, 1.0, 0.0, 0.0, 0.0],
          [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]]
  'E' -> [[1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 0.0],
          [0.0, 1.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0],
          [0.0, 1.0, 1.0, 0.0, 1.0, 0.0, 0.0, 0.0],
          [0.0, 1.0, 1.0, 1.0, 1.0, 0.0, 0.0, 0.0],
          [0.0, 1.0, 1.0, 0.0, 1.0, 0.0, 0.0, 0.0],
          [0.0, 1.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0],
          [1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 0.0],
          [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]]
  'F' -> [[1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 0.0],
          [0.0, 1.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0],
          [0.0, 1.0, 1.0, 0.0, 1.0, 0.0, 0.0, 0.0],
          [0.0, 1.0, 1.0, 1.0, 1.0, 0.0, 0.0, 0.0],
          [0.0, 1.0, 1.0, 0.0, 1.0, 0.0, 0.0, 0.0],
          [0.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0],
          [1.0, 1.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0],
          [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]]
  'G' -> [[0.0, 0.0, 1.0, 1.0, 1.0, 1.0, 0.0, 0.0],
          [0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0],
          [1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0],
          [1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0],
          [1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 1.0, 0.0],
          [0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0],
          [0.0, 0.0, 1.0, 1.0, 1.0, 1.0, 1.0, 0.0],
          [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]]
  'H' -> [[1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0],
          [1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0],
          [1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0],
          [1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 0.0, 0.0],
          [1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0],
          [1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0],
          [1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0],
          [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]]
  'I' -> [[0.0, 1.0, 1.0, 1.0, 1.0, 0.0, 0.0, 0.0],
          [0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0],
          [0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0],
          [0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0],
          [0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0],
          [0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0],
          [0.0, 1.0, 1.0, 1.0, 1.0, 0.0, 0.0, 0.0],
          [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]]
  'J' -> [[0.0, 0.0, 0.0, 1.0, 1.0, 1.0, 1.0, 0.0],
          [0.0, 0.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0],
          [0.0, 0.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0],
          [0.0, 0.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0],
          [1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0],
          [1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0],
          [0.0, 1.0, 1.0, 1.0, 1.0, 0.0, 0.0, 0.0],
          [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]]
  'K' -> [[1.0, 1.0, 1.0, 1.0, 0.0, 1.0, 1.0, 0.0],
          [0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0],
          [0.0, 1.0, 1.0, 0.0, 1.0, 1.0, 0.0, 0.0],
          [0.0, 1.0, 1.0, 1.0, 1.0, 0.0, 0.0, 0.0],
          [0.0, 1.0, 1.0, 0.0, 1.0, 1.0, 0.0, 0.0],
          [0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0],
          [1.0, 1.0, 1.0, 1.0, 0.0, 1.0, 1.0, 0.0],
          [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]]
  'L' -> [[1.0, 1.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0],
          [0.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0],
          [0.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0],
          [0.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0],
          [0.0, 1.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0],
          [0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0],
          [1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 0.0],
          [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]]
  'M' -> [[1.0, 1.0, 0.0, 0.0, 0.0, 1.0, 1.0, 0.0],
          [1.0, 1.0, 1.0, 0.0, 1.0, 1.0, 1.0, 0.0],
          [1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 0.0],
          [1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 0.0],
          [1.0, 1.0, 0.0, 1.0, 0.0, 1.0, 1.0, 0.0],
          [1.0, 1.0, 0.0, 0.0, 0.0, 1.0, 1.0, 0.0],
          [1.0, 1.0, 0.0, 0.0, 0.0, 1.0, 1.0, 0.0],
          [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]]
  'N' -> [[1.0, 1.0, 0.0, 0.0, 0.0, 1.0, 1.0, 0.0],
          [1.0, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0],
          [1.0, 1.0, 1.0, 1.0, 0.0, 1.0, 1.0, 0.0],
          [1.0, 1.0, 0.0, 1.0, 1.0, 1.0, 1.0, 0.0],
          [1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 1.0, 0.0],
          [1.0, 1.0, 0.0, 0.0, 0.0, 1.0, 1.0, 0.0],
          [1.0, 1.0, 0.0, 0.0, 0.0, 1.0, 1.0, 0.0],
          [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]]
  'O' -> [[0.0, 0.0, 1.0, 1.0, 1.0, 0.0, 0.0, 0.0],
          [0.0, 1.0, 1.0, 0.0, 1.0, 1.0, 0.0, 0.0],
          [1.0, 1.0, 0.0, 0.0, 0.0, 1.0, 1.0, 0.0],
          [1.0, 1.0, 0.0, 0.0, 0.0, 1.0, 1.0, 0.0],
          [1.0, 1.0, 0.0, 0.0, 0.0, 1.0, 1.0, 0.0],
          [0.0, 1.0, 1.0, 0.0, 1.0, 1.0, 0.0, 0.0],
          [0.0, 0.0, 1.0, 1.0, 1.0, 0.0, 0.0, 0.0],
          [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]]
  'P' -> [[1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 0.0, 0.0],
          [0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0],
          [0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0],
          [0.0, 1.0, 1.0, 1.0, 1.0, 1.0, 0.0, 0.0],
          [0.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0],
          [0.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0],
          [1.0, 1.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0],
          [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]]
  'Q' -> [[0.0, 1.0, 1.0, 1.0, 1.0, 0.0, 0.0, 0.0],
          [1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0],
          [1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0],
          [1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0],
          [1.0, 1.0, 0.0, 1.0, 1.0, 1.0, 0.0, 0.0],
          [0.0, 1.0, 1.0, 1.0, 1.0, 0.0, 0.0, 0.0],
          [0.0, 0.0, 0.0, 1.0, 1.0, 1.0, 0.0, 0.0],
          [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]]
  'R' -> [[1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 0.0, 0.0],
          [0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0],
          [0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0],
          [0.0, 1.0, 1.0, 1.0, 1.0, 1.0, 0.0, 0.0],
          [0.0, 1.0, 1.0, 0.0, 1.0, 1.0, 0.0, 0.0],
          [0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0],
          [1.0, 1.0, 1.0, 1.0, 0.0, 1.0, 1.0, 0.0],
          [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]]
  'S' -> [[0.0, 1.0, 1.0, 1.0, 1.0, 0.0, 0.0, 0.0],
          [1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0],
          [1.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0],
          [0.0, 1.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0],
          [0.0, 0.0, 0.0, 1.0, 1.0, 1.0, 0.0, 0.0],
          [1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0],
          [0.0, 1.0, 1.0, 1.0, 1.0, 0.0, 0.0, 0.0],
          [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]]
  'T' -> [[1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 0.0, 0.0],
          [1.0, 0.0, 1.0, 1.0, 0.0, 1.0, 0.0, 0.0],
          [0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0],
          [0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0],
          [0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0],
          [0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0],
          [0.0, 1.0, 1.0, 1.0, 1.0, 0.0, 0.0, 0.0],
          [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]]
  'U' -> [[1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0],
          [1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0],
          [1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0],
          [1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0],
          [1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0],
          [1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0],
          [1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 0.0, 0.0],
          [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]]
  'V' -> [[1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0],
          [1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0],
          [1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0],
          [1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0],
          [1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0],
          [0.0, 1.0, 1.0, 1.0, 1.0, 0.0, 0.0, 0.0],
          [0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0],
          [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]]
  'W' -> [[1.0, 1.0, 0.0, 0.0, 0.0, 1.0, 1.0, 0.0],
          [1.0, 1.0, 0.0, 0.0, 0.0, 1.0, 1.0, 0.0],
          [1.0, 1.0, 0.0, 0.0, 0.0, 1.0, 1.0, 0.0],
          [1.0, 1.0, 0.0, 1.0, 0.0, 1.0, 1.0, 0.0],
          [1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 0.0],
          [1.0, 1.0, 1.0, 0.0, 1.0, 1.0, 1.0, 0.0],
          [1.0, 1.0, 0.0, 0.0, 0.0, 1.0, 1.0, 0.0],
          [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]]
  'X' -> [[1.0, 1.0, 0.0, 0.0, 0.0, 1.0, 1.0, 0.0],
          [1.0, 1.0, 0.0, 0.0, 0.0, 1.0, 1.0, 0.0],
          [0.0, 1.0, 1.0, 0.0, 1.0, 1.0, 0.0, 0.0],
          [0.0, 0.0, 1.0, 1.0, 1.0, 0.0, 0.0, 0.0],
          [0.0, 0.0, 1.0, 1.0, 1.0, 0.0, 0.0, 0.0],
          [0.0, 1.0, 1.0, 0.0, 1.0, 1.0, 0.0, 0.0],
          [1.0, 1.0, 0.0, 0.0, 0.0, 1.0, 1.0, 0.0],
          [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]]
  'Y' -> [[1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0],
          [1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0],
          [1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0],
          [0.0, 1.0, 1.0, 1.0, 1.0, 0.0, 0.0, 0.0],
          [0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0],
          [0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0],
          [0.0, 1.0, 1.0, 1.0, 1.0, 0.0, 0.0, 0.0],
          [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]]
  'Z' -> [[1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 0.0],
          [1.0, 1.0, 0.0, 0.0, 0.0, 1.0, 1.0, 0.0],
          [1.0, 0.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0],
          [0.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 0.0],
          [0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 0.0],
          [0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0],
          [1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 0.0],
          [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]]
  '<' -> [[0.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 0.0],
          [0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0],
          [0.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0],
          [1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0],
          [1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0],
          [0.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0],
          [0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0],
          [0.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 0.0]]
  '>' -> [[0.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 0.0],
          [0.0, 0.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0],
          [0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 1.0, 0.0],
          [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 1.0],
          [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 1.0],
          [0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 1.0, 0.0],
          [0.0, 0.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0],
          [0.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 0.0]]
  '-' -> [[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0],
          [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0],
          [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0],
          [0.0, 1.0, 1.0, 1.0, 1.0, 1.0, 0.0, 0.0],
          [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0],
          [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0],
          [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0],
          [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]]
  ':' -> [[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0],
          [0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0],
          [0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0],
          [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0],
          [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0],
          [0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0],
          [0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0],
          [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]]
  '1' -> [[0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0],
          [0.0, 1.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0],
          [0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0],
          [0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0],
          [0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0],
          [0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0],
          [1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 0.0, 0.0],
          [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]]
  '2' -> [[0.0, 1.0, 1.0, 1.0, 1.0, 0.0, 0.0, 0.0],
          [1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0],
          [0.0, 0.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0],
          [0.0, 0.0, 1.0, 1.0, 1.0, 0.0, 0.0, 0.0],
          [0.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0],
          [1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0],
          [1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 0.0, 0.0],
          [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]]
  '3' -> [[0.0, 1.0, 1.0, 1.0, 1.0, 0.0, 0.0, 0.0],
          [1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0],
          [0.0, 0.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0],
          [0.0, 0.0, 1.0, 1.0, 1.0, 0.0, 0.0, 0.0],
          [0.0, 0.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0],
          [1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0],
          [0.0, 1.0, 1.0, 1.0, 1.0, 0.0, 0.0, 0.0],
          [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]]
  '?' -> [[0.0, 1.0, 1.0, 1.0, 1.0, 0.0, 0.0, 0.0],
          [1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0],
          [0.0, 0.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0],
          [0.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 0.0],
          [0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0],
          [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0],
          [0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0],
          [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]]
  '!' -> [[0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0],
          [0.0, 1.0, 1.0, 1.0, 1.0, 0.0, 0.0, 0.0],
          [0.0, 1.0, 1.0, 1.0, 1.0, 0.0, 0.0, 0.0],
          [0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0],
          [0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0],
          [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0],
          [0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0],
          [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]]
  '0' -> [[0.0, 1.0, 1.0, 1.0, 1.0, 0.0, 0.0, 0.0],
          [1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0],
          [1.0, 1.0, 0.0, 1.0, 1.0, 1.0, 0.0, 0.0],
          [1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 0.0, 0.0],
          [1.0, 1.0, 1.0, 0.0, 1.0, 1.0, 0.0, 0.0],
          [1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0],
          [0.0, 1.0, 1.0, 1.0, 1.0, 1.0, 0.0, 0.0],
          [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]]
  '.' -> [[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0],
          [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0],
          [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0],
          [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0],
          [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0],
          [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0],
          [0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0],
          [0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0]]
  ',' -> [[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0],
          [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0],
          [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0],
          [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0],
          [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0],
          [0.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 0.0],
          [0.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 0.0],
          [0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0]]
  '(' -> [[0.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 0.0],
          [0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0],
          [0.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0],
          [0.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0],
          [0.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0],
          [0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0],
          [0.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 0.0],
          [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]]
  ')' -> [[0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0],
          [0.0, 0.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0],
          [0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 1.0, 0.0],
          [0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 1.0, 0.0],
          [0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 1.0, 0.0],
          [0.0, 0.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0],
          [0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0],
          [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]]
  _   -> replicate 8 (replicate 8 0.0)

scaleChar :: Int -> [[Double]] -> [[Double]]
scaleChar targetHeight bitmap =
  [ [ interpolate x y | x <- [0..newWidth - 1] ]
  | y <- [0..targetHeight - 1] ]
  where
    origWidth = length (head bitmap)
    origHeight = length bitmap

    scaleFactor = fromIntegral targetHeight / fromIntegral origHeight
    newWidth = floor (fromIntegral origWidth * scaleFactor * cellAspect)

    interpolate x y =
      let srcX = floor (fromIntegral x / (scaleFactor * cellAspect))
          srcY = floor (fromIntegral y / scaleFactor)
      in if srcY < origHeight && srcX < origWidth
            then bitmap !! srcY !! srcX
            else 0.0

-- Add vertical spacing
addSpacing :: [[Double]] -> [[Double]]
addSpacing = map (++ [0.0, 0.0])  -- Add 2px vertical spacing
